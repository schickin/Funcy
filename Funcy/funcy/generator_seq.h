//           Copyright Thomas Schickinger, 2013
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef GENERATOR_SEQ_H_
#define GENERATOR_SEQ_H_


#include "funcy/sequence.h"

#include <functional>

//! A sequence that is dynamically generated by a generator function.
//!
template <typename ElemType>
class GeneratorSeq : public Sequence<GeneratorSeq<ElemType>>
{
public:
  typedef ElemType Elem;
  typedef std::function<Elem(Elem)> GeneratorFunc;

  GeneratorSeq(const GeneratorFunc& generator, const Elem& initialValue = Elem()) :
    generator_(generator),
    currVal_(initialValue)
  { }

  bool empty() const
  { return false; }

  const Elem& cval() const
  { return currVal_; }

  void next()
  { currVal_ = generator_(currVal_); }

private:
  const GeneratorFunc generator_;
  Elem currVal_;
};

template <typename Elem, typename Callable>
GeneratorSeq<Elem> generate_seq(const Callable& generator, const Elem& initialValue = Elem())
{
  return GeneratorSeq<Elem>(generator, initialValue);
}

#endif /* GENERATOR_SEQ_H_ */
