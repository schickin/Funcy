//           Copyright Thomas Schickinger, 2013
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef GENERATOR_SEQ_H_
#define GENERATOR_SEQ_H_


#include "funcy/impl/sequence_crtp.h"

#include <functional>
#include <type_traits>

//! A sequence that is dynamically generated by a generator function.
//!
template <typename ElemType, typename Callable = std::function<ElemType(ElemType)>>
class GeneratorSeq : public SequenceCRTP<GeneratorSeq<ElemType, Callable>, ElemType>
{
public:
  typedef ElemType Elem;

  //! @param generator needs to live at least as long as GeneratorSeq (not copied)
  //! note: copying is not possible if the callable is a global or static function
  //! (in contrast to a function pointer that can be copied).
  GeneratorSeq(const Callable& generator, const Elem& initialValue = Elem()) :
    generator_(generator),
    currVal_(initialValue)
  { }

  bool empty() const
  { return false; }

  const Elem& cval() const
  { return currVal_; }

  void next()
  { currVal_ = generator_(currVal_); }

private:
  const Callable& generator_;
  Elem currVal_;
};

template <typename Elem, typename Callable>
GeneratorSeq<Elem, Callable> generate_seq(
    const Callable& generator, const Elem& initialValue = Elem())
{
  return GeneratorSeq<Elem, Callable>(generator, initialValue);
}

#endif /* GENERATOR_SEQ_H_ */
